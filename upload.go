// auto-generated
// Code generated by '$ fyne bundle'. DO NOT EDIT.

package main

import "fyne.io/fyne/v2"

var resourceUploadHtml = &fyne.StaticResource{
	StaticName: "upload.html",
	StaticContent: []byte(
		"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>局域网文件快传</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css\" rel=\"stylesheet\">\n    <script>\n        tailwind.config = {\n            theme: {\n                extend: {\n                    colors: {\n                        primary: '#165DFF',\n                        secondary: '#0FC6C2',\n                        accent: '#722ED1',\n                        success: '#00B42A',\n                        warning: '#FF7D00',\n                        danger: '#F53F3F',\n                        dark: '#1D2129',\n                        'dark-2': '#4E5969',\n                        'light-1': '#F2F3F5',\n                        'light-2': '#E5E6EB',\n                        'light-3': '#C9CDD4',\n                    },\n                    fontFamily: {\n                        inter: ['Inter', 'system-ui', 'sans-serif'],\n                    },\n                    boxShadow: {\n                        'card': '0 10px 30px -5px rgba(0, 0, 0, 0.1)',\n                        'hover': '0 20px 40px -5px rgba(22, 93, 255, 0.15)',\n                    }\n                },\n            }\n        }\n    </script>\n    <style type=\"text/tailwindcss\">\n        @layer utilities {\n            .content-auto {\n                content-visibility: auto;\n            }\n            .transition-custom {\n                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            }\n            .scale-hover {\n                transition: transform 0.3s ease;\n            }\n            .scale-hover:hover {\n                transform: scale(1.02);\n            }\n            .progress-animation {\n                transition: width 0.5s ease-in-out;\n            }\n            .upload-drop-zone {\n                border: 2px dashed #C9CDD4;\n                border-radius: 12px;\n                transition: all 0.3s ease;\n            }\n            .upload-drop-zone.active {\n                border-color: #165DFF;\n                background-color: rgba(22, 93, 255, 0.05);\n            }\n        }\n    </style>\n</head>\n<body class=\"font-inter bg-gray-50 min-h-screen flex flex-col\">\n    <!-- 导航栏 -->\n    <header class=\"bg-white shadow-sm sticky top-0 z-50\">\n        <div class=\"container mx-auto px-4 py-4 flex justify-between items-center\">\n            <div class=\"flex items-center space-x-2\">\n                <i class=\"fa fa-cloud-upload text-primary text-2xl\"></i>\n                <h1 class=\"text-xl font-bold text-dark\">局域网文件快传</h1>\n            </div>\n            <div class=\"flex items-center space-x-4\">\n                <div class=\"md:flex items-center space-x-2 text-dark-2\">\n                    <!-- <i class=\"fa fa-info-circle\"></i> -->\n                    <a id=\"upload-btn\" href=\"/\" class=\"upload-btn\">\n                        <i class=\"fas fa-file\"></i>\n                        全部文件\n                    </a>\n                </div>\n                <button id=\"theme-toggle\" class=\"p-2 rounded-full hover:bg-gray-100 transition-custom\">\n                    <i class=\"fa fa-moon-o text-dark-2\"></i>\n                </button>\n            </div>\n        </div>\n    </header>\n\n    <!-- 主内容区 -->\n    <main class=\"flex-grow container mx-auto px-4 py-8\">\n        <!-- 欢迎信息 -->\n        <section class=\"mb-8 text-center\">\n            <h2 class=\"text-[clamp(1.5rem,3vw,2.5rem)] font-bold text-dark mb-3\">上传共享文件</h2>\n            <p class=\"text-dark-2 max-w-2xl mx-auto\">将需要共享文件上传到这台计算机。支持拖拽上传、多文件上传和断点续传。</p>\n        </section>\n\n        <!-- 文件上传区域 -->\n        <section class=\"max-w-3xl mx-auto mb-12\">\n            <div id=\"drop-zone\" class=\"upload-drop-zone p-8 text-center cursor-pointer mb-6\">\n                <div class=\"flex flex-col items-center\">\n                    <div class=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n                        <i class=\"fa fa-cloud-upload text-primary text-2xl\"></i>\n                    </div>\n                    <h3 class=\"text-lg font-semibold text-dark mb-2\">拖放文件到此处上传</h3>\n                    <p class=\"text-dark-2 mb-6\">或者</p>\n                    <label for=\"file-input\" class=\"bg-primary hover:bg-primary/90 text-white px-6 py-3 rounded-lg font-medium transition-custom flex items-center\">\n                        <i class=\"fa fa-plus mr-2\"></i>\n                        选择文件上传\n                    </label>\n                    <input id=\"file-input\" type=\"file\" multiple class=\"hidden\">\n                    <p class=\"text-xs text-dark-2 mt-4\">支持的格式: 所有文件类型，最大文件大小: 无限制</p>\n                </div>\n            </div>\n\n            <!-- 文件列表 -->\n            <div id=\"file-list\" class=\"space-y-4\">\n                <!-- 文件项将通过JavaScript动态添加 -->\n            </div>\n        </section>\n\n        <!-- 上传统计 -->\n        <section class=\"max-w-3xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n            <div class=\"bg-white rounded-xl p-6 shadow-card scale-hover\">\n                <div class=\"flex items-center justify-between mb-4\">\n                    <h3 class=\"text-dark font-semibold\">今日上传</h3>\n                    <div class=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <i class=\"fa fa-upload text-primary\"></i>\n                    </div>\n                </div>\n                <p class=\"text-3xl font-bold text-dark\" id=\"upload-count\">0</p>\n                <p class=\"text-sm text-dark-2\">个文件</p>\n            </div>\n            <div class=\"bg-white rounded-xl p-6 shadow-card scale-hover\">\n                <div class=\"flex items-center justify-between mb-4\">\n                    <h3 class=\"text-dark font-semibold\">总上传大小</h3>\n                    <div class=\"w-10 h-10 bg-secondary/10 rounded-full flex items-center justify-center\">\n                        <i class=\"fa fa-database text-secondary\"></i>\n                    </div>\n                </div>\n                <p class=\"text-3xl font-bold text-dark\" id=\"upload-size\">0 MB</p>\n                <p class=\"text-sm text-dark-2\">已上传</p>\n            </div>\n            <div class=\"bg-white rounded-xl p-6 shadow-card scale-hover\">\n                <div class=\"flex items-center justify-between mb-4\">\n                    <h3 class=\"text-dark font-semibold\">上传速度</h3>\n                    <div class=\"w-10 h-10 bg-accent/10 rounded-full flex items-center justify-center\">\n                        <i class=\"fa fa-tachometer text-accent\"></i>\n                    </div>\n                </div>\n                <p class=\"text-3xl font-bold text-dark\" id=\"upload-speed\">0 KB/s</p>\n                <p class=\"text-sm text-dark-2\">当前速度</p>\n            </div>\n        </section>\n\n        <!-- 最近上传 -->\n        <section class=\"max-w-3xl mx-auto mb-12\">\n            <div class=\"flex justify-between items-center mb-6\">\n                <h3 class=\"text-xl font-bold text-dark\">最近上传</h3>\n                <button id=\"clear-history\" class=\"text-danger hover:text-danger/80 text-sm font-medium transition-custom flex items-center\">\n                    <i class=\"fa fa-trash-o mr-1\"></i>\n                    清空历史\n                </button>\n            </div>\n            <div id=\"history-list\" class=\"space-y-3\">\n                <!-- 历史记录将通过JavaScript动态添加 -->\n                <div class=\"text-center text-dark-2 py-8\">\n                    <i class=\"fa fa-clock-o text-3xl mb-3 text-light-3\"></i>\n                    <p>暂无上传历史</p>\n                </div>\n            </div>\n        </section>\n    </main>\n\n    <!-- 页脚 -->\n    <footer class=\"bg-white border-t border-light-2 py-6\">\n        <div class=\"container mx-auto px-4 text-center text-dark-2 text-sm\">\n            <p>© 2025 心悦科技 </p>\n        </div>\n    </footer>\n\n    <!-- 通知组件 -->\n    <div id=\"notification-container\" class=\"fixed top-4 right-4 z-50 flex flex-col space-y-3 w-80\"></div>\n\n    <script>\n        // 全局变量\n        const fileList = document.getElementById('file-list');\n        const dropZone = document.getElementById('drop-zone');\n        const fileInput = document.getElementById('file-input');\n        const historyList = document.getElementById('history-list');\n        const uploadCount = document.getElementById('upload-count');\n        const uploadSize = document.getElementById('upload-size');\n        const uploadSpeed = document.getElementById('upload-speed');\n        const clearHistoryBtn = document.getElementById('clear-history');\n        const ipAddressElement = document.getElementById('ip-address');\n        const themeToggle = document.getElementById('theme-toggle');\n        const notificationContainer = document.getElementById('notification-container');\n\n        // 上传服务器地址\n        const UPLOAD_URL = '/api/upload';\n\n        // 初始化上传统计\n        let totalUploads = 0;\n        let totalSize = 0;\n        let currentSpeed = 0;\n\n        // 获取IP地址\n        fetch('/get-ip')\n            .then(response => response.json())\n            .then(data => {\n                ipAddressElement.textContent = `上传地址: http://${data.ip}:8000`;\n            })\n            .catch(error => {\n                console.error('获取IP地址失败:', error);\n                ipAddressElement.textContent = '无法获取IP地址，请确保网络连接正常';\n                ipAddressElement.classList.add('text-danger');\n            });\n\n        // 主题切换\n        let isDarkMode = false;\n        themeToggle.addEventListener('click', () => {\n            isDarkMode = !isDarkMode;\n            document.body.classList.toggle('bg-gray-900', isDarkMode);\n            document.body.classList.toggle('text-white', isDarkMode);\n            themeToggle.innerHTML = isDarkMode ? \n                '<i class=\"fa fa-sun-o text-yellow-400\"></i>' : \n                '<i class=\"fa fa-moon-o text-dark-2\"></i>';\n            \n            // 更新卡片样式\n            const cards = document.querySelectorAll('.bg-white');\n            cards.forEach(card => {\n                card.classList.toggle('bg-gray-800', isDarkMode);\n                card.classList.toggle('bg-white', !isDarkMode);\n            });\n            \n            // 更新文本颜色\n            const darkTexts = document.querySelectorAll('.text-dark');\n            darkTexts.forEach(text => {\n                text.classList.toggle('text-white', isDarkMode);\n                text.classList.toggle('text-dark', !isDarkMode);\n            });\n            \n            const dark2Texts = document.querySelectorAll('.text-dark-2');\n            dark2Texts.forEach(text => {\n                text.classList.toggle('text-gray-300', isDarkMode);\n                text.classList.toggle('text-dark-2', !isDarkMode);\n            });\n        });\n\n        // 拖放事件处理\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n            dropZone.addEventListener(eventName, preventDefaults, false);\n        });\n\n        function preventDefaults(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        ['dragenter', 'dragover'].forEach(eventName => {\n            dropZone.addEventListener(eventName, highlight, false);\n        });\n\n        ['dragleave', 'drop'].forEach(eventName => {\n            dropZone.addEventListener(eventName, unhighlight, false);\n        });\n\n        function highlight() {\n            dropZone.classList.add('active');\n        }\n\n        function unhighlight() {\n            dropZone.classList.remove('active');\n        }\n\n        dropZone.addEventListener('drop', handleDrop, false);\n\n        function handleDrop(e) {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n            handleFiles(files);\n        }\n\n        // 文件选择\n        fileInput.addEventListener('change', function() {\n            handleFiles(this.files);\n        });\n\n        // 处理选择的文件\n        function handleFiles(files) {\n            if (files.length === 0) return;\n            \n            Array.from(files).forEach(file => {\n                // 检查是否已添加相同文件\n                const existingFile = Array.from(fileList.children).find(item => \n                    item.getAttribute('data-filename') === file.name && \n                    item.getAttribute('data-size') === file.size.toString()\n                );\n                \n                if (existingFile) {\n                    showNotification('文件已添加', '该文件已在上传列表中', 'warning');\n                    return;\n                }\n                \n                addFileToQueue(file);\n            });\n        }\n\n        // 添加文件到上传队列\n        function addFileToQueue(file) {\n            const fileId = `file-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n            const fileSize = formatFileSize(file.size);\n            \n            // 创建文件项\n            const fileItem = document.createElement('div');\n            fileItem.id = fileId;\n            fileItem.setAttribute('data-filename', file.name);\n            fileItem.setAttribute('data-size', file.size);\n            fileItem.className = 'bg-white rounded-xl p-4 shadow-card transition-custom hover:shadow-hover';\n            \n            // 文件图标\n            const fileIcon = getFileIcon(file.name);\n            \n            // 构建文件项内容\n            fileItem.innerHTML = `\n                <div class=\"flex items-start space-x-4\">\n                    <div class=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                        <i class=\"fa ${fileIcon} text-primary\"></i>\n                    </div>\n                    <div class=\"flex-grow min-w-0\">\n                        <div class=\"flex justify-between items-start mb-2\">\n                            <h4 class=\"text-dark font-medium truncate\">${file.name}</h4>\n                            <button class=\"cancel-upload text-dark-2 hover:text-danger transition-custom\">\n                                <i class=\"fa fa-times\"></i>\n                            </button>\n                        </div>\n                        <div class=\"flex justify-between items-center text-sm mb-1\">\n                            <span class=\"text-dark-2\">${fileSize}</span>\n                            <span class=\"status text-dark-2\">等待中</span>\n                        </div>\n                        <div class=\"w-full bg-light-2 rounded-full h-2\">\n                            <div class=\"progress-bar bg-primary h-2 rounded-full progress-animation\" style=\"width: 0%\"></div>\n                        </div>\n                    </div>\n                </div>\n            `;\n            \n            // 添加到文件列表\n            fileList.appendChild(fileItem);\n            \n            // 添加上传任务\n            queueUpload(fileId, file);\n            \n            // 更新统计信息\n            updateStats();\n        }\n\n        // 队列处理上传任务\n        let activeUploads = 0;\n        const MAX_CONCURRENT_UPLOADS = 3;\n        const uploadQueue = [];\n\n        function queueUpload(fileId, file) {\n            uploadQueue.push({ fileId, file });\n            processUploadQueue();\n        }\n\n        async function processUploadQueue() {\n            if (uploadQueue.length === 0 || activeUploads >= MAX_CONCURRENT_UPLOADS) return;\n            \n            const { fileId, file } = uploadQueue.shift();\n            activeUploads++;\n            \n            try {\n                await uploadFile(fileId, file);\n            } catch (error) {\n                console.error('上传失败:', error);\n                setFileStatus(fileId, '上传失败', 'danger');\n                showNotification('上传失败', `${file.name} 上传失败: ${error.message}`, 'danger');\n            } finally {\n                activeUploads--;\n                processUploadQueue();\n            }\n        }\n\n        // 实际文件上传\n        function uploadFile(fileId, file) {\n            return new Promise((resolve, reject) => {\n                const fileItem = document.getElementById(fileId);\n                if (!fileItem) return resolve();\n                \n                const progressBar = fileItem.querySelector('.progress-bar');\n                const statusElement = fileItem.querySelector('.status');\n                const cancelButton = fileItem.querySelector('.cancel-upload');\n                \n                // 设置初始状态\n                setFileStatus(fileId, '准备上传', 'primary');\n                \n                // 创建表单数据\n                const formData = new FormData();\n                formData.append('file', file);\n                \n                // 创建XHR对象\n                const xhr = new XMLHttpRequest();\n                xhr.open('POST', UPLOAD_URL, true);\n                \n                // 上传进度\n                xhr.upload.addEventListener('progress', (e) => {\n                    if (e.lengthComputable) {\n                        const percentComplete = (e.loaded / e.total) * 100;\n                        progressBar.style.width = `${percentComplete}%`;\n                        \n                        // 计算上传速度\n                        const elapsedTime = (new Date().getTime() - startTime) / 1000; // 秒\n                        const uploadedSize = e.loaded;\n                        currentSpeed = uploadedSize / elapsedTime / 1024; // KB/s\n                        \n                        // 更新速度显示\n                        uploadSpeed.textContent = `${currentSpeed.toFixed(1)} KB/s`;\n                        \n                        setFileStatus(fileId, `上传中 ${Math.round(percentComplete)}%`, 'primary');\n                    }\n                });\n                \n                // 上传完成\n                xhr.addEventListener('load', () => {\n                    if (xhr.status === 200) {\n                        try {\n                            const response = JSON.parse(xhr.responseText);\n                            setFileStatus(fileId, '上传完成', 'success');\n                            // 添加到历史记录\n                            addToHistory(file);\n                            // 更新统计\n                            totalUploads++;\n                            totalSize += file.size;\n                            updateStats();\n                            // 显示通知\n                            showNotification('上传成功', `${file.name} 已成功上传`, 'success');\n                            \n                            // // 3秒后移除上传项\n                            // setTimeout(() => {\n                            //     fileItem.classList.add('opacity-0');\n                            //     setTimeout(() => fileItem.remove(), 300);\n                            // }, 3000);\n                            \n                            resolve();\n                        } catch (parseError) {\n                            console.error('解析响应失败:', parseError);\n                            setFileStatus(fileId, '上传失败', 'danger');\n                            showNotification('上传失败', `${file.name} 上传失败: 服务器响应格式错误`, 'danger');\n                            reject(new Error('服务器响应格式错误'));\n                        }\n                    } else {\n                        setFileStatus(fileId, '上传失败', 'danger');\n                        showNotification('上传失败', `${file.name} 上传失败: ${xhr.statusText}`, 'danger');\n                        reject(new Error(xhr.statusText));\n                    }\n                });\n                \n                // 上传错误\n                xhr.addEventListener('error', () => {\n                    setFileStatus(fileId, '上传失败', 'danger');\n                    showNotification('上传失败', `${file.name} 上传失败: 网络错误`, 'danger');\n                    reject(new Error('网络错误'));\n                });\n                \n                // 上传取消\n                xhr.addEventListener('abort', () => {\n                    setFileStatus(fileId, '已取消', 'danger');\n                    showNotification('上传已取消', `${file.name} 的上传已取消`, 'info');\n                    reject(new Error('上传已取消'));\n                });\n                \n                // 取消上传\n                cancelButton.addEventListener('click', () => {\n                    xhr.abort();\n                    \n                    // 从队列中移除（如果还在队列中）\n                    const index = uploadQueue.findIndex(item => item.fileId === fileId);\n                    if (index !== -1) {\n                        uploadQueue.splice(index, 1);\n                    }\n                    \n                    // 3秒后移除上传项\n                    setTimeout(() => {\n                        fileItem.classList.add('opacity-0');\n                        setTimeout(() => fileItem.remove(), 300);\n                    }, 1000);\n                });\n                \n                // 开始上传\n                let startTime = new Date().getTime();\n                xhr.send(formData);\n            });\n        }\n\n        // 设置文件状态\n        function setFileStatus(fileId, statusText, statusClass) {\n            const fileItem = document.getElementById(fileId);\n            if (!fileItem) return;\n            \n            const statusElement = fileItem.querySelector('.status');\n            statusElement.textContent = statusText;\n            statusElement.className = `status text-${statusClass}`;\n        }\n\n        // 添加到历史记录\n        function addToHistory(file) {\n            const fileSize = formatFileSize(file.size);\n            const fileIcon = getFileIcon(file.name);\n            const now = new Date();\n            const timeString = now.toLocaleTimeString();\n            \n            // 创建历史记录项\n            const historyItem = document.createElement('div');\n            historyItem.className = 'bg-white rounded-lg p-3 flex items-center justify-between shadow-sm hover:shadow-md transition-custom';\n            historyItem.innerHTML = `\n                <div class=\"flex items-center space-x-3\">\n                    <div class=\"w-8 h-8 rounded bg-primary/10 flex items-center justify-center\">\n                        <i class=\"fa ${fileIcon} text-primary text-sm\"></i>\n                    </div>\n                    <div class=\"flex-grow min-w-0\">\n                        <h4 class=\"text-dark font-medium text-sm truncate\">${file.name}</h4>\n                        <p class=\"text-dark-2 text-xs\">${fileSize} • ${timeString}</p>\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <button class=\"download-history text-dark-2 hover:text-primary transition-custom p-1\" title=\"下载\">\n                        <i class=\"fa fa-download\"></i>\n                    </button>\n                    <button class=\"delete-history text-dark-2 hover:text-danger transition-custom p-1\" title=\"删除\">\n                        <i class=\"fa fa-trash-o\"></i>\n                    </button>\n                </div>\n            `;\n            \n            // 如果是第一条记录，清空\"暂无上传历史\"提示\n            if (historyList.querySelector('.text-center')) {\n                historyList.innerHTML = '';\n            }\n            \n            // 添加到历史列表开头\n            historyList.insertBefore(historyItem, historyList.firstChild);\n            \n            // 下载按钮事件\n            const downloadBtn = historyItem.querySelector('.download-history');\n            downloadBtn.addEventListener('click', () => {\n                // 下载文件\n                window.location.href = `/download/${encodeURIComponent(file.name)}`;\n            });\n            \n            // 删除按钮事件\n            const deleteBtn = historyItem.querySelector('.delete-history');\n            deleteBtn.addEventListener('click', () => {\n                // 从服务器删除文件\n                fetch(`/delete/${encodeURIComponent(file.name)}`, { method: 'DELETE' })\n                    .then(response => {\n                        if (response.ok) {\n                            historyItem.classList.add('opacity-0');\n                            setTimeout(() => historyItem.remove(), 300);\n                            \n                            // 如果删除后没有记录了，显示空提示\n                            if (historyList.children.length === 0) {\n                                historyList.innerHTML = `\n                                    <div class=\"text-center text-dark-2 py-8\">\n                                        <i class=\"fa fa-clock-o text-3xl mb-3 text-light-3\"></i>\n                                        <p>暂无上传历史</p>\n                                    </div>\n                                `;\n                            }\n                            \n                            showNotification('已删除', `${file.name} 已从服务器删除`, 'info');\n                        } else {\n                            showNotification('删除失败', `无法删除 ${file.name}`, 'danger');\n                        }\n                    })\n                    .catch(error => {\n                        console.error('删除文件失败:', error);\n                        showNotification('删除失败', `删除文件时发生错误`, 'danger');\n                    });\n            });\n        }\n\n        // 清空历史记录\n        clearHistoryBtn.addEventListener('click', () => {\n            if (historyList.querySelector('.text-center')) return;\n            \n            // 先删除服务器上的所有文件\n            fetch('/delete-all', { method: 'DELETE' })\n                .then(response => {\n                    if (response.ok) {\n                        // 添加淡出动画\n                        Array.from(historyList.children).forEach(child => {\n                            child.classList.add('opacity-0');\n                        });\n                        \n                        // 300ms后清空列表\n                        setTimeout(() => {\n                            historyList.innerHTML = `\n                                <div class=\"text-center text-dark-2 py-8\">\n                                    <i class=\"fa fa-clock-o text-3xl mb-3 text-light-3\"></i>\n                                    <p>暂无上传历史</p>\n                                </div>\n                            `;\n                        }, 300);\n                        \n                        showNotification('已清空历史', '所有上传历史记录已被清除', 'info');\n                    } else {\n                        showNotification('清空失败', '无法清空历史记录', 'danger');\n                    }\n                })\n                .catch(error => {\n                    console.error('清空历史失败:', error);\n                    showNotification('清空失败', '清空历史记录时发生错误', 'danger');\n                });\n        });\n\n        // 更新统计信息\n        function updateStats() {\n            uploadCount.textContent = totalUploads;\n            uploadSize.textContent = formatFileSize(totalSize);\n        }\n\n        // 格式化文件大小\n        function formatFileSize(bytes) {\n            if (bytes === 0) return '0 Bytes';\n            \n            const k = 1024;\n            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n        }\n\n        // 获取文件图标\n        function getFileIcon(filename) {\n            const ext = filename.split('.').pop().toLowerCase();\n            \n            const fileIcons = {\n                doc: 'fa-file-word-o',\n                docx: 'fa-file-word-o',\n                xls: 'fa-file-excel-o',\n                xlsx: 'fa-file-excel-o',\n                pdf: 'fa-file-pdf-o',\n                jpg: 'fa-file-image-o',\n                jpeg: 'fa-file-image-o',\n                png: 'fa-file-image-o',\n                gif: 'fa-file-image-o',\n                mp3: 'fa-file-audio-o',\n                mp4: 'fa-file-video-o',\n                zip: 'fa-file-archive-o',\n                rar: 'fa-file-archive-o',\n                html: 'fa-file-code-o',\n                css: 'fa-file-code-o',\n                js: 'fa-file-code-o',\n                txt: 'fa-file-text-o'\n            };\n            \n            return fileIcons[ext] || 'fa-file-o';\n        }\n\n        // 显示通知\n        function showNotification(title, message, type = 'info') {\n            // const notificationId = `notification-${Date.now()}`;\n            \n            // // 创建通知元素\n            // const notification = document.createElement('div');\n            // notification.id = notificationId;\n            // notification.className = `bg-white rounded-lg shadow-lg p-4 flex items-start space-x-3 transform transition-all duration-300 opacity-0 translate-y-2`;\n            \n            // // 设置通知类型样式\n            // let iconClass, borderClass;\n            // switch(type) {\n            //     case 'success':\n            //         iconClass = 'fa-check-circle text-success';\n            //         borderClass = 'border-l-4 border-success';\n            //         break;\n            //     case 'error':\n            //     case 'danger':\n            //         iconClass = 'fa-exclamation-circle text-danger';\n            //         borderClass = 'border-l-4 border-danger';\n            //         break;\n            //     case 'warning':\n            //         iconClass = 'fa-exclamation-triangle text-warning';\n            //         borderClass = 'border-l-4 border-warning';\n            //         break;\n            //     case 'info':\n            //     default:\n            //         iconClass = 'fa-info-circle text-primary';\n            //         borderClass = 'border-l-4 border-primary';\n            //         break;\n            // }\n            \n            // notification.classList.add(borderClass);\n            \n            // // 设置通知内容\n            // notification.innerHTML = `\n            //     <div class=\"flex-shrink-0 mt-0.5\">\n            //         <i class=\"fa ${iconClass}\"></i>\n            //     </div>\n            //     <div class=\"flex-grow\">\n            //         <h4 class=\"font-medium text-dark\">${title}</h4>\n            //         <p class=\"text-sm text-dark-2\">${message}</p>\n            //     </div>\n            //     <button class=\"close-notification text-dark-2 hover:text-dark transition-custom\">\n            //         <i class=\"fa fa-times\"></i>\n            //     </button>\n            // `;\n            \n            // // 添加到通知容器\n            // notificationContainer.appendChild(notification);\n            \n            // // 显示动画\n            // setTimeout(() => {\n            //     notification.classList.remove('opacity-0', 'translate-y-2');\n            // }, 10);\n            \n            // // 关闭按钮事件\n            // const closeBtn = notification.querySelector('.close-notification');\n            // closeBtn.addEventListener('click', () => {\n            //     removeNotification(notificationId);\n            // });\n            \n            // // 自动关闭\n            // setTimeout(() => {\n            //     removeNotification(notificationId);\n            // }, 5000);\n        }\n\n        // 移除通知\n        function removeNotification(notificationId) {\n            const notification = document.getElementById(notificationId);\n            if (!notification) return;\n            \n            notification.classList.add('opacity-0', 'translate-y-2');\n            setTimeout(() => notification.remove(), 300);\n        }\n\n        // 添加页面加载动画\n        document.addEventListener('DOMContentLoaded', () => {\n            // 显示页面\n            document.body.classList.add('opacity-100');\n            document.body.classList.remove('opacity-0');\n            \n            // 显示通知\n            // showNotification('欢迎使用', '您可以拖放文件到此处或点击选择文件上传', 'info');\n            \n            // // 加载历史记录\n            // fetch('/history')\n            //     .then(response => response.json())\n            //     .then(files => {\n            //         if (files && files.length > 0) {\n            //             historyList.innerHTML = '';\n            //             files.forEach(file => {\n            //                 addToHistory({\n            //                     name: file.name,\n            //                     size: file.size\n            //                 });\n            //             });\n            //         }\n            //     })\n            //     .catch(error => {\n            //         console.error('加载历史记录失败:', error);\n            //     });\n        });\n    </script>\n</body>\n</html>\n    "),
}
